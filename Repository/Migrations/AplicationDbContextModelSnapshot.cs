// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    partial class AplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataTransferObjects.AccountMoreHeadlines", b =>
                {
                    b.Property<Guid>("AccountNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfHolders")
                        .HasColumnType("int");

                    b.ToTable("AccountMoreHeadlines", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("DataTransferObjects.CustomerAccountBalance", b =>
                {
                    b.Property<string>("Client")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("TotalDebtBalanceShareholders", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("DataTransferObjects.FranchiseDebt", b =>
                {
                    b.Property<string>("FranchiseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalDeuda")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("FranchiseDebt", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("DataTransferObjects.HighestBalanceExchange", b =>
                {
                    b.Property<decimal>("BalanceExchange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("HighestBalanceExchange", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("DataTransferObjects.HighestWithdrawnBalance", b =>
                {
                    b.Property<string>("Client")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WithdrawnBalance")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("HighestWithdrawnBalance", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("DataTransferObjects.NumberActiveForeignAccounts", b =>
                {
                    b.Property<int>("ActiveForeignAccounts")
                        .HasColumnType("int");

                    b.ToTable("ActiveForeignAccounts", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Entities.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ApprovedLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("PersonId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Entities.CreditCardTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionCreditCardTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransactionNumber")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("TransactionCreditCardTypeId");

                    b.ToTable("CreditCardTransactions");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Antioquia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cundinamarca"
                        });
                });

            modelBuilder.Entity("Entities.ExchangeTransactionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeTransactionStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Validacion"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Aprobado"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Rechazado"
                        });
                });

            modelBuilder.Entity("Entities.Franchise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Franchise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Visa"
                        },
                        new
                        {
                            Id = 2,
                            Description = "MasterCard"
                        },
                        new
                        {
                            Id = 3,
                            Description = "AmericanExpress"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Diners"
                        });
                });

            modelBuilder.Entity("Entities.LegalPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LegalRepresentativeId")
                        .HasColumnType("int");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LegalRepresentativeId");

                    b.ToTable("LegalPersons");
                });

            modelBuilder.Entity("Entities.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Municipalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Medellín "
                        },
                        new
                        {
                            Id = 2,
                            Name = "Envigado"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bogotá  "
                        },
                        new
                        {
                            Id = 4,
                            Name = "Soacha"
                        });
                });

            modelBuilder.Entity("Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Colombiana"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Americana"
                        });
                });

            modelBuilder.Entity("Entities.NaturalPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTipe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("NationalityId");

                    b.ToTable("NaturalPersons");
                });

            modelBuilder.Entity("Entities.PersonRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleId");

                    b.ToTable("PersonRoles");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Entities.SavingsAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SavingsAccounts");
                });

            modelBuilder.Entity("Entities.SavingsAccountHolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SavingsAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SavingsAccountId");

                    b.ToTable("SavingsAccountHolders");
                });

            modelBuilder.Entity("Entities.SavingsAccountTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ExchangeTransactionStateId")
                        .HasColumnType("int");

                    b.Property<int>("SavingsAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransactionNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeTransactionStateId");

                    b.HasIndex("SavingsAccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("SavingsAccountTransactions");
                });

            modelBuilder.Entity("Entities.ShareholdingComposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ShareholderId")
                        .HasColumnType("int");

                    b.Property<int?>("ShareholderLegalId")
                        .HasColumnType("int");

                    b.Property<decimal>("percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ShareholderId");

                    b.HasIndex("ShareholderLegalId");

                    b.ToTable("ShareholdingCompositions");
                });

            modelBuilder.Entity("Entities.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "DepositoEfectivo"
                        },
                        new
                        {
                            Id = 2,
                            Description = "DepositoCheque"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Retiro"
                        });
                });

            modelBuilder.Entity("Entities.TransactionsCreditCardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionsCreditCardTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "ComprasNacionales"
                        },
                        new
                        {
                            Id = 2,
                            Description = "CuotaManejo"
                        },
                        new
                        {
                            Id = 3,
                            Description = "PagoTarjeta"
                        },
                        new
                        {
                            Id = 4,
                            Description = "RetirosAvance"
                        });
                });

            modelBuilder.Entity("Entities.CreditCard", b =>
                {
                    b.HasOne("Entities.Franchise", "Franchise")
                        .WithMany("CreditCards")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.NaturalPerson", "Person")
                        .WithMany("CreditCards")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.CreditCardTransaction", b =>
                {
                    b.HasOne("Entities.CreditCard", "CreditCard")
                        .WithMany("Transactions")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TransactionsCreditCardType", "TransactionsCreditCardType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionCreditCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("TransactionsCreditCardType");
                });

            modelBuilder.Entity("Entities.LegalPerson", b =>
                {
                    b.HasOne("Entities.NaturalPerson", "LegalRepresentative")
                        .WithMany("LegalPersons")
                        .HasForeignKey("LegalRepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LegalRepresentative");
                });

            modelBuilder.Entity("Entities.NaturalPerson", b =>
                {
                    b.HasOne("Entities.Department", "Department")
                        .WithMany("NaturalPersons")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Municipality", "Municipality")
                        .WithMany("NaturalPersons")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Nationality", "Nationality")
                        .WithMany("NaturalPersons")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Municipality");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Entities.PersonRole", b =>
                {
                    b.HasOne("Entities.LegalPerson", "LegalPerson")
                        .WithMany("PersonRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.NaturalPerson", "NaturalPerson")
                        .WithMany("PersonRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Role", "Role")
                        .WithMany("PersonRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LegalPerson");

                    b.Navigation("NaturalPerson");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.SavingsAccountHolder", b =>
                {
                    b.HasOne("Entities.NaturalPerson", "NaturalPerson")
                        .WithMany("SavingsAccountHolders")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Entities.SavingsAccount", "SavingsAccount")
                        .WithMany("AccountHolders")
                        .HasForeignKey("SavingsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NaturalPerson");

                    b.Navigation("SavingsAccount");
                });

            modelBuilder.Entity("Entities.SavingsAccountTransaction", b =>
                {
                    b.HasOne("Entities.ExchangeTransactionState", "ExchangeTransactionState")
                        .WithMany("Transactions")
                        .HasForeignKey("ExchangeTransactionStateId");

                    b.HasOne("Entities.SavingsAccount", "SavingsAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("SavingsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExchangeTransactionState");

                    b.Navigation("SavingsAccount");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("Entities.ShareholdingComposition", b =>
                {
                    b.HasOne("Entities.LegalPerson", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.NaturalPerson", "ShareholderNatural")
                        .WithMany()
                        .HasForeignKey("ShareholderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.LegalPerson", "ShareholderLegal")
                        .WithMany()
                        .HasForeignKey("ShareholderLegalId");

                    b.Navigation("Company");

                    b.Navigation("ShareholderLegal");

                    b.Navigation("ShareholderNatural");
                });

            modelBuilder.Entity("Entities.CreditCard", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Navigation("NaturalPersons");
                });

            modelBuilder.Entity("Entities.ExchangeTransactionState", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Entities.Franchise", b =>
                {
                    b.Navigation("CreditCards");
                });

            modelBuilder.Entity("Entities.LegalPerson", b =>
                {
                    b.Navigation("PersonRoles");
                });

            modelBuilder.Entity("Entities.Municipality", b =>
                {
                    b.Navigation("NaturalPersons");
                });

            modelBuilder.Entity("Entities.Nationality", b =>
                {
                    b.Navigation("NaturalPersons");
                });

            modelBuilder.Entity("Entities.NaturalPerson", b =>
                {
                    b.Navigation("CreditCards");

                    b.Navigation("LegalPersons");

                    b.Navigation("PersonRoles");

                    b.Navigation("SavingsAccountHolders");
                });

            modelBuilder.Entity("Entities.Role", b =>
                {
                    b.Navigation("PersonRoles");
                });

            modelBuilder.Entity("Entities.SavingsAccount", b =>
                {
                    b.Navigation("AccountHolders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Entities.TransactionsCreditCardType", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
